# 1 "buildingDoor.pml"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "buildingDoor.pml"



typedef Log
{
 int current;
 int id[20];
 int arrivalDay[20];
 int arrivalTime[20];
 int departureDay[20];
 int departureTime[20];
};

Log logbook;

bool isValid = false;
bool isInside = false;

int nbPassages = 0;

bool doorOpened = false;

int ident;



chan red = [0] of { byte };
chan green = [0] of { byte };
chan off = [0] of { byte };


chan putColor = [1] of { chan };



chan unblocked = [0] of {byte};
chan blocked = [0] of {byte};





chan detection = [0] of {int};
chan resetLaser = [0] of {int};




chan alertIntrusion = [0] of {int};
chan alertFire = [0] of {int};
chan detFire = [0] of {int};


chan registerArrival = [0] of {int, int, int};
chan registerDeparture = [0] of {int, int, int};


chan getInfoIn = [0] of {int, int, int};
chan getInfoEx = [0] of {int, int, int};


chan STDIN;
chan in = [0] of {int};
chan out = [0] of {int};


chan registration = [0] of {int};

chan cancelRegistration = [0] of {int}






inline wait(x)
{
 int a = 0;
 do
  ::a!=x->a++;
  ::a==x->break
 od
}

init
{
 logbook.current = 0;


 run simulation();
 run lightCommand();
 run light('o');

 run door('b');
 run laser(0);
 run journal();
 run externalCardReader();
 run internalCardReader();

 run intrusionAlarm();

 run fireAlarm();
 run fireSensor();
 run command();

}


inline addEntry(_id, _day, _time)
{
 atomic
 {
  logbook.id[logbook.current] = _id;
  logbook.arrivalDay[logbook.current] = _day;
  logbook.arrivalTime[logbook.current] = _time;
  logbook.current++;
 }
}

inline completeEntry(_id, _day, _time)
{
 int i=0;

 do
 :: logbook.id[i] != _id || (logbook.id[i] == _id && logbook.departureDay[i] != 0) ->
  i++;
 :: else ->
  break;
 od

 if
 :: (i > logbook.current) ->
  printf("This person did not enter the building");
 :: else ->
  logbook.departureDay[i] = _day;
  logbook.departureTime[i] = _time;
 fi

}

inline checkIsInside(_id)
{
 int i=0;
 do
 :: i < logbook.current && logbook.id[i] != _id || (logbook.id[i] == _id && logbook.departureDay[i] != 0) ->
  i++;
 :: else ->
  break;
 od

 if
 :: i < logbook.current ->
  isInside = true;
 :: else ->
  isInside = false;
 fi
}

inline checkIsValid(_id)
{
 if
 :: _id < 1000 ->
  isValid = true;
 :: else ->
  isValid = false;
 fi
}

inline displayLogbook()
{
 atomic
 {
  int i=0;
  printf("--------- \n");

  do
  :: i<logbook.current ->
   printf("%d: %d %d, %d %d\n", logbook.id[i], logbook.arrivalDay[i], logbook.arrivalTime[i], logbook.departureDay[i], logbook.departureTime[i]);
   i++;
  :: else ->
   break;
  od

  printf("---------\n");
 };
}

proctype light(byte state)
{


 if
  ::red?_;
   state= 'r';
   printf("light:state %c\n" ,state);

   run light(state)
  ::green?_;
   state= 'g';
   printf("light:state %c\n" ,state);
   run light(state)
  ::off?_;
   state= 'o';
   printf("light:state %c\n" ,state);
   run light(state)
 fi


}

proctype lightCommand()
{
 chan myChan;

 putColor?myChan;
 myChan!0;
 wait(50000);
 off!0;
 run lightCommand()

}

proctype door(byte state)
{
 if
  ::unblocked?_;
   state= 'u';
   printf("door:state %c\n" ,state);
   doorOpened = true;
   wait(300000);
   if
    ::nbPassages == 0->cancelRegistration!0;
    ::else->;
   fi
   run door(state)
  ::blocked?_;
   state= 'b';
   printf("door:state %c\n" ,state);
   doorOpened = false;
   run door(state)
 fi

}
# 260 "buildingDoor.pml"
proctype laser()
{
 do
  ::detection?_;
   nbPassages ++;
   printf("Passage detected\n");
   if
    ::nbPassages > 1 -> alertIntrusion!0;
    ::nbPassages == 1 -> registration!0;

   fi;
  ::resetLaser?_;
   printf("reset\n");
   nbPassages = 0;
 od;



}
# 324 "buildingDoor.pml"
proctype intrusionAlarm()
{
 alertIntrusion?_;
 printf("Intrusion alert!\n");
 run intrusionAlarm()
}

proctype fireAlarm()
{
 alertFire?_;
 printf("Fire alert!\n");
 run fireAlarm();
}

proctype fireSensor()
{
 detFire?_;
 alertFire!0;
 unblocked!'u';

 atomic {
  printf("People in the building:\n");
  displayLogbook();
 };
 run fireSensor();
}

proctype externalCardReader()
{
 int id, day, time;

 getInfoEx?id, day, time;
 atomic
 {
  checkIsValid(id);
  if
  :: isValid == true ->

   putColor!green;
   if
    ::registration?_;
     registerArrival!id, day, time;
    ::cancelRegistration?_;


   fi


   :: else ->
   printf("Cannot enter building\n");
   putColor!red;


  fi
 };
 run externalCardReader();
}

proctype internalCardReader()
{
 int id, day, time;


 atomic
 {
  getInfoIn?id, day, time;

  checkIsInside(id);
  if
   :: isInside == true ->

    putColor!green;
    if
     ::registration?_;
      registerDeparture!id, day, time;
     ::cancelRegistration?_;

    fi

   :: else ->
    printf("Cannot leave building\n");
    putColor!red;

  fi
 };

 run internalCardReader();
}

proctype journal()
{
 int id, day, time;
 if
 ::registerArrival?id, day, time;
  addEntry(id, day, time);
 ::registerDeparture?id, day, time;
  completeEntry(id, day, time);
 fi
 run journal();
}

proctype simulation()
{

 int c;


 do

  ::STDIN?c->
   printf("%c\n",c );
   if
    ::c=='i'-> in!0;
    ::c=='o'-> out!0;
    ::c=='d'-> detection!0;
    ::c=='f'-> detFire!0;

    ::else->;
   fi
 od;






}

proctype command()
{





 atomic {

  int i;
  if



   ::
    out?_->getInfoEx!ident,30032018,1120;
    if
     ::
      isValid;
      unblocked!0;
      doorOpened;



      blocked!0;

      resetLaser!0;

     ::else->;
    fi
   ::
    in?_->getInfoIn!ident,30032018,1120;
    if
     ::
      isInside;
      unblocked!0;
      doorOpened;



      blocked!0;
      resetLaser!0;
     ::else->;
    fi
  fi


 }




 atomic
 {
  printf("\n- The logbook currently:\n");
  displayLogbook();
 }

 run command();
# 596 "buildingDoor.pml"
}
